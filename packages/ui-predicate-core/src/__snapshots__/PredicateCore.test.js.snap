// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UIPredicateCore CompoundPredicate constructor can't be constructed with at least one subpredicate 1`] = `[CompoundPredicateMustHaveAtLeastOneSubPredicate]`;

exports[`UIPredicateCore constructor check that every targets refer to a defined type 1`] = `[TargetMustReferToADefinedType: target "article.title" does not refer to a defined type, target.type_id="string"]`;

exports[`UIPredicateCore constructor default state (without passed data) should have one predicate, selected automatically 1`] = `
Object {
  "logic": Object {
    "label": "Any",
    "logicalType_id": "any",
  },
  "predicates": Array [
    Object {
      "arguments": Array [],
      "operator": Object {
        "label": "is",
        "operator_id": "is",
      },
      "target": Object {
        "label": "Title",
        "target_id": "title",
        "type_id": "string",
      },
    },
  ],
}
`;

exports[`UIPredicateCore constructor expose computed options 1`] = `
Array [
  "on",
  "once",
  "off",
  "setData",
  "add",
  "remove",
  "setPredicateTarget_id",
  "setPredicateOperator_id",
  "setPredicateLogicalType_id",
  "root",
  "toJSON",
  "columns",
  "options",
]
`;

exports[`UIPredicateCore constructor rejects an error if data does not start with a ComparisonPredicate 1`] = `[RootPredicateMustBeACompoundPredicate]`;

exports[`UIPredicateCore ctrl.add adds a second Predicate (a ComparisonPredicate) to the root CompoundPredicate 1`] = `
Object {
  "logic": Object {
    "label": "Any",
    "logicalType_id": "any",
  },
  "predicates": Array [
    Object {
      "arguments": Array [],
      "operator": Object {
        "label": "is",
        "operator_id": "is",
      },
      "target": Object {
        "label": "Title",
        "target_id": "title",
        "type_id": "string",
      },
    },
    Object {
      "arguments": Array [],
      "operator": Object {
        "label": "is",
        "operator_id": "is",
      },
      "target": Object {
        "label": "Title",
        "target_id": "title",
        "type_id": "string",
      },
    },
  ],
}
`;

exports[`UIPredicateCore ctrl.add rejects if \`how\` is unsupported 1`] = `[AddCurrentlyOnlySupportAfterInsertion]`;

exports[`UIPredicateCore ctrl.add rejects if Predicate type is invalid 1`] = `[InvalidPredicateType]`;

exports[`UIPredicateCore ctrl.add rejects if where is unsupported 1`] = `[CannotAddSomethingElseThanACompoundPredicateOrAComparisonPredicate]`;

exports[`UIPredicateCore ctrl.remove(predicate) allow to remove a comparisonPredicate 1`] = `
Object {
  "$_type": "CompoundPredicate",
  "$canBeRemoved": false,
  "logic": Object {
    "$_type": "LogicalType",
    "label": "Any",
    "logicalType_id": "any",
  },
  "predicates": Array [
    Object {
      "$_type": "ComparisonPredicate",
      "$canBeRemoved": false,
      "arguments": Array [],
      "operator": Object {
        "$_type": "Operator",
        "label": "is",
        "operator_id": "is",
      },
      "target": Object {
        "$_type": "Target",
        "$type": Object {
          "$_type": "Type",
          "$operators": Array [
            Object {
              "$_type": "Operator",
              "label": "is",
              "operator_id": "is",
            },
            Object {
              "$_type": "Operator",
              "label": "contains",
              "operator_id": "contains",
            },
          ],
          "operator_ids": Array [
            "is",
            "contains",
          ],
          "type_id": "string",
        },
        "label": "Title",
        "target_id": "title",
        "type_id": "string",
      },
    },
  ],
}
`;

exports[`UIPredicateCore ctrl.remove(predicate) allow to remove a comparisonPredicate and its parent CompoundPredicate if it was the last comparisonPredicate 1`] = `
Object {
  "$_type": "CompoundPredicate",
  "$canBeRemoved": false,
  "logic": Object {
    "$_type": "LogicalType",
    "label": "Any",
    "logicalType_id": "any",
  },
  "predicates": Array [
    Object {
      "$_type": "ComparisonPredicate",
      "$canBeRemoved": false,
      "arguments": Array [],
      "operator": Object {
        "$_type": "Operator",
        "label": "is",
        "operator_id": "is",
      },
      "target": Object {
        "$_type": "Target",
        "$type": Object {
          "$_type": "Type",
          "$operators": Array [
            Object {
              "$_type": "Operator",
              "label": "is",
              "operator_id": "is",
            },
            Object {
              "$_type": "Operator",
              "label": "contains",
              "operator_id": "contains",
            },
          ],
          "operator_ids": Array [
            "is",
            "contains",
          ],
          "type_id": "string",
        },
        "label": "Title",
        "target_id": "title",
        "type_id": "string",
      },
    },
  ],
}
`;

exports[`UIPredicateCore ctrl.remove(predicate) allow to remove a compoundpredicate 1`] = `
Object {
  "$_type": "CompoundPredicate",
  "$canBeRemoved": true,
  "logic": Object {
    "$_type": "LogicalType",
    "label": "Any",
    "logicalType_id": "any",
  },
  "predicates": Array [
    Object {
      "$_type": "ComparisonPredicate",
      "$canBeRemoved": true,
      "arguments": Array [],
      "operator": Object {
        "$_type": "Operator",
        "label": "is",
        "operator_id": "is",
      },
      "target": Object {
        "$_type": "Target",
        "$type": Object {
          "$_type": "Type",
          "$operators": Array [
            Object {
              "$_type": "Operator",
              "label": "is",
              "operator_id": "is",
            },
            Object {
              "$_type": "Operator",
              "label": "contains",
              "operator_id": "contains",
            },
          ],
          "operator_ids": Array [
            "is",
            "contains",
          ],
          "type_id": "string",
        },
        "label": "Title",
        "target_id": "title",
        "type_id": "string",
      },
    },
  ],
}
`;

exports[`UIPredicateCore ctrl.remove(predicate) forbids to remove an unknown type of predicate 1`] = `[CannotRemoveSomethingElseThanACompoundPredicateOrAComparisonPredicate]`;

exports[`UIPredicateCore ctrl.remove(predicate) forbids to remove the last predicate of the root CompoundPredicate 1`] = `[ForbiddenCannotRemoveLastComparisonPredicate]`;

exports[`UIPredicateCore ctrl.remove(predicate) forbids to remove the root CompoundPredicate 1`] = `[ForbiddenCannotRemoveRootCompoundPredicate]`;

exports[`UIPredicateCore ctrl.setPredicateLogicalType_id yield a rejected promise if logicalType_id cannot be found 1`] = `[LogicalType_idMustReferToADefinedLogicalType]`;

exports[`UIPredicateCore ctrl.setPredicateLogicalType_id yield a rejected promise if predicate is not a CompoundPredicate 1`] = `[PredicateMustBeACompoundPredicate]`;

exports[`UIPredicateCore ctrl.setPredicateOperator_id rejects an error if operator_id cannot be found 1`] = `[Operator_idMustReferToADefinedOperator]`;

exports[`UIPredicateCore ctrl.setPredicateTarget_id rejects when predicate refers to a invalid predicate 1`] = `[PredicateMustBeAComparisonPredicate]`;

exports[`UIPredicateCore ctrl.setPredicateTarget_id rejects when target_id refers to a not defined target 1`] = `[Target_idMustReferToADefinedTarget]`;

exports[`UIPredicateCore ctrl.setPredicateTarget_id work if we set a predicate to an exist target_id 1`] = `
Object {
  "$_type": "ComparisonPredicate",
  "$canBeRemoved": false,
  "arguments": Array [],
  "operator": Object {
    "$_type": "Operator",
    "label": "<",
    "operator_id": "isLowerThan",
  },
  "target": Object {
    "$_type": "Target",
    "$type": Object {
      "$_type": "Type",
      "$operators": Array [
        Object {
          "$_type": "Operator",
          "label": "<",
          "operator_id": "isLowerThan",
        },
        Object {
          "$_type": "Operator",
          "label": "=",
          "operator_id": "isEqualTo",
        },
        Object {
          "$_type": "Operator",
          "label": ">",
          "operator_id": "isHigherThan",
        },
      ],
      "operator_ids": Array [
        "isLowerThan",
        "isEqualTo",
        "isHigherThan",
      ],
      "type_id": "int",
    },
    "label": "Video count",
    "target_id": "videoCount",
    "type_id": "int",
  },
}
`;

exports[`UIPredicateCore toJSON serialize without special flags 1`] = `
Object {
  "logic": Object {
    "label": "Any",
    "logicalType_id": "any",
  },
  "predicates": Array [
    Object {
      "arguments": Array [],
      "operator": Object {
        "label": "is",
        "operator_id": "is",
      },
      "target": Object {
        "label": "Title",
        "target_id": "title",
        "type_id": "string",
      },
    },
    Object {
      "logic": Object {
        "label": "Any",
        "logicalType_id": "any",
      },
      "predicates": Array [
        Object {
          "arguments": Array [],
          "operator": Object {
            "label": "is",
            "operator_id": "is",
          },
          "target": Object {
            "label": "Title",
            "target_id": "title",
            "type_id": "string",
          },
        },
        Object {
          "logic": Object {
            "label": "Any",
            "logicalType_id": "any",
          },
          "predicates": Array [
            Object {
              "arguments": Array [],
              "operator": Object {
                "label": "is",
                "operator_id": "is",
              },
              "target": Object {
                "label": "Title",
                "target_id": "title",
                "type_id": "string",
              },
            },
          ],
        },
      ],
    },
  ],
}
`;
