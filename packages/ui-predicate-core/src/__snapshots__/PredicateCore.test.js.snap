// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`core.component constructor check that every targets refer to a defined type 1`] = `[TargetMustReferToADefinedType: target "article.title" does not refer to a defined type, target.type_id="string"]`;

exports[`core.component constructor default state (without passed data) should have one predicate, selected automatically 1`] = `
Object {
  "$_type": "CompoundPredicate",
  "logic": "and",
  "predicates": Array [
    Object {
      "$_type": "ComparisonPredicate",
      "arguments": Array [],
      "operator": Object {
        "$_type": "Operator",
        "label": "Est",
        "operator_id": "is",
      },
      "target": Object {
        "$_type": "Target",
        "$type": Object {
          "$_type": "Type",
          "$operators": Array [
            Object {
              "$_type": "Operator",
              "label": "Est",
              "operator_id": "is",
            },
            Object {
              "$_type": "Operator",
              "label": "Contient",
              "operator_id": "contains",
            },
          ],
          "operator_ids": Array [
            "is",
            "contains",
          ],
          "type_id": "string",
        },
        "label": "Titre article",
        "target_id": "article.title",
        "type_id": "string",
      },
    },
  ],
}
`;

exports[`core.component constructor rejects an error if data does not start with a ComparisonPredicate 1`] = `[RootPredicateMustBeACompoundPredicate]`;

exports[`core.component ctrl.add adds a second Predicate (a ComparisonPredicate) to the root CompoundPredicate 1`] = `
Object {
  "$_type": "CompoundPredicate",
  "logic": "and",
  "predicates": Array [
    Object {
      "$_type": "ComparisonPredicate",
      "arguments": Array [],
      "operator": Object {
        "$_type": "Operator",
        "label": "Est",
        "operator_id": "is",
      },
      "target": Object {
        "$_type": "Target",
        "$type": Object {
          "$_type": "Type",
          "$operators": Array [
            Object {
              "$_type": "Operator",
              "label": "Est",
              "operator_id": "is",
            },
            Object {
              "$_type": "Operator",
              "label": "Contient",
              "operator_id": "contains",
            },
          ],
          "operator_ids": Array [
            "is",
            "contains",
          ],
          "type_id": "string",
        },
        "label": "Titre article",
        "target_id": "article.title",
        "type_id": "string",
      },
    },
    Object {
      "$_type": "ComparisonPredicate",
      "arguments": Array [],
      "operator": Object {
        "$_type": "Operator",
        "label": "Est",
        "operator_id": "is",
      },
      "target": Object {
        "$_type": "Target",
        "$type": Object {
          "$_type": "Type",
          "$operators": Array [
            Object {
              "$_type": "Operator",
              "label": "Est",
              "operator_id": "is",
            },
            Object {
              "$_type": "Operator",
              "label": "Contient",
              "operator_id": "contains",
            },
          ],
          "operator_ids": Array [
            "is",
            "contains",
          ],
          "type_id": "string",
        },
        "label": "Titre article",
        "target_id": "article.title",
        "type_id": "string",
      },
    },
  ],
}
`;

exports[`core.component ctrl.add rejects if \`how\` is unsupported 1`] = `[AddCurrentlyOnlySupportAfterInsertion]`;

exports[`core.component ctrl.add rejects if Predicate type is invalid 1`] = `[InvalidPredicateType]`;

exports[`core.component ctrl.add rejects if where is unsupported 1`] = `[Error: Can't add after something else than a CompoundPredicate or a ComparisonPredicate, got: {}]`;

exports[`core.component ctrl.setPredicateOperator_id rejects an error if operator_id cannot be found 1`] = `[Operator_idMustReferToADefinedOperator]`;

exports[`core.component ctrl.setPredicateTarget_id rejects when predicate refers to a invalid predicate 1`] = `[PredicateMustBeAComparisonPredicate]`;

exports[`core.component ctrl.setPredicateTarget_id rejects when target_id refers to a not defined target 1`] = `[Target_idMustReferToADefinedTarget]`;

exports[`core.component ctrl.setPredicateTarget_id work if we set a predicate to an exist target_id 1`] = `
Object {
  "$_type": "ComparisonPredicate",
  "arguments": Array [],
  "operator": Object {
    "$_type": "Operator",
    "label": "<",
    "operator_id": "isLowerThan",
  },
  "target": Object {
    "$_type": "Target",
    "$type": Object {
      "$_type": "Type",
      "$operators": Array [
        Object {
          "$_type": "Operator",
          "label": "<",
          "operator_id": "isLowerThan",
        },
        Object {
          "$_type": "Operator",
          "label": "=",
          "operator_id": "isEqualTo",
        },
        Object {
          "$_type": "Operator",
          "label": ">",
          "operator_id": "isHigherThan",
        },
      ],
      "operator_ids": Array [
        "isLowerThan",
        "isEqualTo",
        "isHigherThan",
      ],
      "type_id": "int",
    },
    "label": "Nombre de vid√©o",
    "target_id": "videoCount",
    "type_id": "int",
  },
}
`;

exports[`core.data CompoundPredicate constructor can't be constructed with at least one subpredicate 1`] = `[CompoundPredicateMustHaveAtLeastOneSubPredicate]`;
