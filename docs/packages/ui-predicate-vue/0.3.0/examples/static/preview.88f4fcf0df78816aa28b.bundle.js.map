{"version":3,"file":"static/preview.88f4fcf0df78816aa28b.bundle.js","sources":["webpack:///./src/__fixtures__/index.js"],"sourcesContent":["import Vue from 'vue';\n\nmodule.exports = {\n  DEFAULT_CONFIG: {\n    // besides array list names, everything else follows convention https://github.com/FGRibreau/sql-convention\n    operators: [\n      {\n        operator_id: 'is',\n        label: 'is',\n        argumentType_id: 'smallString',\n      },\n      {\n        operator_id: 'contains',\n        label: 'Contains',\n        argumentType_id: 'smallString',\n      },\n      {\n        operator_id: 'isLowerThan',\n        label: '<',\n        argumentType_id: 'number',\n      },\n      {\n        operator_id: 'isEqualTo',\n        label: '=',\n        argumentType_id: 'number',\n      },\n      {\n        operator_id: 'isHigherThan',\n        label: '>',\n        argumentType_id: 'number',\n      },\n      {\n        operator_id: 'is_date',\n        label: 'is',\n        argumentType_id: 'datepicker',\n      },\n      {\n        operator_id: 'isBetween_date',\n        label: 'is between',\n        argumentType_id: 'daterangepicker',\n      },\n      {\n        operator_id: 'isBrighterThan',\n        label: 'is brighter than',\n        argumentType_id: 'colorpicker',\n      },\n      {\n        operator_id: 'isDarkerThan',\n        label: 'is darker than',\n        argumentType_id: 'colorpicker',\n      },\n      {\n        operator_id: 'is_color',\n        label: 'is',\n        argumentType_id: 'colorpicker',\n      },\n    ],\n    types: [\n      {\n        type_id: 'int',\n        operator_ids: ['isLowerThan', 'isEqualTo', 'isHigherThan'],\n      },\n      {\n        type_id: 'string',\n        operator_ids: ['is', 'contains'],\n      },\n      {\n        type_id: 'datetime',\n        operator_ids: ['is_date', 'isBetween_date'],\n      },\n      {\n        type_id: 'color',\n        operator_ids: ['isBrighterThan', 'isDarkerThan', 'is_color'],\n      },\n    ],\n    targets: [\n      {\n        target_id: 'article.title',\n        label: 'Article title',\n        type_id: 'string',\n      },\n      {\n        target_id: 'article.videoCount',\n        label: 'Article video count',\n        type_id: 'int',\n      },\n      {\n        target_id: 'article.publishingAt',\n        label: 'Article publish date',\n        type_id: 'datetime',\n      },\n      {\n        target_id: 'article.color',\n        label: 'Article main color',\n        type_id: 'color',\n      },\n    ],\n    logicalTypes: [\n      {\n        logicalType_id: 'any',\n        label: 'Any',\n      },\n      {\n        logicalType_id: 'all',\n        label: 'All',\n      },\n      {\n        logicalType_id: 'none',\n        label: 'None',\n      },\n    ],\n    argumentTypes: [\n      {\n        argumentType_id: 'datepicker',\n        component: getHTML5InputVueComponent('date'),\n      },\n      {\n        argumentType_id: 'colorpicker',\n        component: getHTML5InputVueComponent('color'),\n      },\n      {\n        argumentType_id: 'daterangepicker',\n        component: Vue.component('daterangepicker-argument', {\n          props: {\n            value: {\n              type: null,\n              required: true,\n            },\n          },\n          data() {\n            return this._fromValue(this.value);\n          },\n          methods: {\n            _fromValue(value) {\n              const [start, end] = Array.isArray(value) ? value : [];\n              return {\n                start,\n                end,\n              };\n            },\n            _toValue() {\n              return [this.start, this.end];\n            },\n            _updated() {\n              this.$emit('change', this._toValue());\n            },\n            _onStartChange({ target: { value: newValue } }) {\n              this.start = newValue;\n              this._updated();\n            },\n            _onEndChange({ target: { value: newValue } }) {\n              this.end = newValue;\n              this._updated();\n            },\n          },\n          template: `<div style=\"display: flex;width: 260px;\">\n          <input type=\"date\" @change=\"_onStartChange\" :value=\"start\">\n          <span>and</span>\n          <input type=\"date\" @change=\"_onEndChange\" :value=\"end\"></div>`,\n        }),\n      },\n      {\n        argumentType_id: 'smallString',\n        component: getHTML5InputVueComponent('text'),\n      },\n      {\n        argumentType_id: 'number',\n        component: getHTML5InputVueComponent('number'),\n      },\n    ],\n  },\n\n  DATASETS: {\n    simple: {\n      logicalType_id: 'all',\n      predicates: [\n        {\n          target_id: 'article.videoCount',\n          operator_id: 'isHigherThan',\n          argument: 10,\n        },\n      ],\n    },\n    advanced: {\n      logicalType_id: 'all',\n      predicates: [\n        {\n          target_id: 'article.title',\n          operator_id: 'contains',\n          argument: 'paradise',\n        },\n        {\n          target_id: 'article.videoCount',\n          operator_id: 'isHigherThan',\n          argument: 2,\n        },\n        {\n          logicalType_id: 'none',\n          predicates: [\n            {\n              target_id: 'article.publishingAt',\n              operator_id: 'isBetween_date',\n              argument: ['2017-10-05', '2018-10-05'],\n            },\n            {\n              target_id: 'article.publishingAt',\n              operator_id: 'isBetween_date',\n              argument: ['2010-10-05', '2011-10-05'],\n            },\n            {\n              target_id: 'article.color',\n              operator_id: 'is_color',\n              argument: '#e20400',\n            },\n            {\n              target_id: 'article.color',\n              operator_id: 'isDarkerThan',\n              argument: '#783d3e',\n            },\n          ],\n        },\n      ],\n    },\n  },\n};\n\nfunction getHTML5InputVueComponent(type) {\n  return Vue.component(`${type}-argument`, {\n    methods: {\n      _onChange({ target: { value: newValue } }) {\n        this.$emit('change', newValue);\n      },\n    },\n    props: {\n      value: {\n        type: null,\n        required: true,\n      },\n    },\n    template: `<div><input type=\"${type}\" @change=\"_onChange\" :value=\"value\"></div>`,\n  });\n}\n"],"mappings":"AAAA","sourceRoot":""}